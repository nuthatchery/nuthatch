package nuthatch.stratego.actions;

import nuthatch.library.Action;
import nuthatch.library.MatchAction;
import nuthatch.library.Walk;
import nuthatch.library.impl.actions.AbstractComposeBuilder;
import nuthatch.library.impl.actions.MatchBuilder;
import nuthatch.pattern.Pattern;
import nuthatch.stratego.adapter.TermCursor;
import nuthatch.stratego.adapter.TermWalk;

import org.spoofax.interpreter.terms.IStrategoTerm;

public class SActionFactory {
	public static final nuthatch.library.impl.actions.ActionFactory<IStrategoTerm, Integer, TermCursor, TermWalk> factory = nuthatch.library.impl.actions.ActionFactory.getInstance();


	public nuthatch.library.impl.actions.ActionFactory<IStrategoTerm, Integer, TermCursor, TermWalk> getInstance() {
		return factory;
	}


	// The code below is generated by doing "Generate delegate methods" on 'factory', then putting 'static' in front of them.

	/**
	 * @param action
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#afterChild(nuthatch.library.Action)
	 */
	public static Action<TermWalk> afterChild(Action<TermWalk> action) {
		return factory.afterChild(action);
	}


	/**
	 * @param action
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#atLeaf(nuthatch.library.Action)
	 */
	public static Action<TermWalk> atLeaf(Action<TermWalk> action) {
		return factory.atLeaf(action);
	}


	/**
	 * @param action
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#atRoot(nuthatch.library.Action)
	 */
	public static Action<TermWalk> atRoot(Action<TermWalk> action) {
		return factory.atRoot(action);
	}


	/**
	 * @param action
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#beforeChild(nuthatch.library.Action)
	 */
	public static Action<TermWalk> beforeChild(Action<TermWalk> action) {
		return factory.beforeChild(action);
	}


	/**
	 * @param actions
	 * @return
	 * @see
	 *      nuthatch.library.impl.actions.ActionFactory#combine(nuthatch.walk.
	 *      Action
	 *      <W>[])
	 */
	public static final Action<TermWalk> combine(Action<TermWalk>... actions) {
		return factory.combine(actions);
	}


	/**
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#combineBuilder()
	 */
	public static AbstractComposeBuilder<TermWalk> combineBuilder() {
		return factory.combineBuilder();
	}


	/**
	 * @param action
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#down(nuthatch.library.Action)
	 */
	public static Action<TermWalk> down(Action<TermWalk> action) {
		return factory.down(action);
	}


	/**
	 * @param downAction
	 * @param upAction
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#downup(nuthatch.library.Action,
	 *      nuthatch.library.Action)
	 */
	public static Action<TermWalk> downup(Action<TermWalk> downAction, Action<TermWalk> upAction) {
		return factory.downup(downAction, upAction);
	}


	/**
	 * @param pat
	 * @param action
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#match(nuthatch.pattern.Pattern,
	 *      nuthatch.library.MatchAction)
	 */
	public static Action<TermWalk> match(Pattern<IStrategoTerm, Integer> pat, MatchAction<IStrategoTerm, Integer, TermCursor, TermWalk> action) {
		return factory.match(pat, action);
	}


	public static MatchBuilder<IStrategoTerm, Integer, TermCursor, TermWalk> matchBuilder() {
		return factory.matchBuilder();
	}


	/**
	 * @param actions
	 * @return
	 * @see
	 *      nuthatch.library.impl.actions.ActionFactory#seq(nuthatch.walk.Action
	 *      <
	 *      W>[])
	 */
	@SafeVarargs
	public static final Action<TermWalk> seq(Action<TermWalk>... actions) {
		return factory.seq(actions);
	}


	/**
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#sequenceBuilder()
	 */
	public static AbstractComposeBuilder<TermWalk> sequenceBuilder() {
		return factory.sequenceBuilder();
	}


	/**
	 * @param action
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#up(nuthatch.library.Action)
	 */
	public static Action<TermWalk> up(Action<TermWalk> action) {
		return factory.up(action);
	}


	/**
	 * @param action
	 * @return
	 * @see nuthatch.library.impl.actions.ActionFactory#walk(nuthatch.library.Action)
	 */
	public static Walk<TermWalk> walk(Action<TermWalk> action) {
		return factory.walk(action);
	}

}
