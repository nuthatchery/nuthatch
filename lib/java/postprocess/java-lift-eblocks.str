module java/postprocess/java-lift-eblocks

imports
  libstratego-lib

/*

Semantics that this transformation gives to e-blocks (is somewhat dubious):

   Plus(PreEBlock([Assign(x1, e1)], PostEBlock(e2, [Assign(x3,e3)])),
        PreEBlock([Assign(x4, e4)], PostEBlock(e5, [Assign(x6,e6)])))

->

   [Assign(x1, e1),
    Assign(x4, e4),
    Plus(e2, e5),
    Assign(x3, e3),
    Assign(x6, e6)]

with left-to-right evaluation would we not expect the x3 assignment to happen
before the x4 assignment?

*/


strategies

  java-lift-eblocks =
    bottomup(try( java-desugar-prepostblock <+ java-lift-to-block-level ))

  java-desugar-prepostblock :
    PrePostEBlock(pre, expr, post) -> PreEBlock(pre, PostEBlock(expr, post) )

  java-lift-to-block-level = 
        java-lift-from-blocks 
    <+  java-lift-from-constructor-blocks
    <+  java-lift-from-switchgroup-blocks
  
  java-lift-from-blocks : 
    Block(bstm1*) -> Block(bstm2*)
    with bstm2* := <mapconcat(java-local-lift-eblocks)> bstm1*

  java-lift-from-constructor-blocks :
    ConstrBody(x, bstm1*) -> ConstrBody(x, bstm2*) 
    with bstm2* := <mapconcat(java-local-lift-eblocks)> bstm1*

  java-lift-from-switchgroup-blocks :
    SwitchGroup(x, bstm1*) -> SwitchGroup(x, bstm2*)
    with bstm2* := <mapconcat(java-local-lift-eblocks)> bstm1*
      
  /**
   * @todo  Nested EBlocks?
   * @todo  Nested Blocks?
   * @todo  Is Block the only block level element?
   * @todo  Anonymous inner classes?
   */
  java-local-lift-eblocks =
      java-collect-split-om-pre-eblock
    ; ?(<id>, pre-stms)
    ; java-collect-split-om-post-eblock
    ; ?(t, post-stms)
    ; if !post-stms => []; !pre-stms => [] then
        ![t]
      else 
        <concat> [<mapconcat(java-local-lift-eblocks)> pre-stms, <java-local-lift-eblocks> t, <mapconcat(java-local-lift-eblocks)> post-stms]
      end

  java-collect-split-om-pre-eblock =
    rules( JavaPreEBlocks := [] )
    ; alltd(java-lift-pre-eblock)
    ; !(<id>,<JavaPreEBlocks>)

  java-lift-pre-eblock :
    PreEBlock(bstm*, e) -> e
    with rules( JavaPreEBlocks := <conc>(bstm*, <JavaPreEBlocks>) )

  java-collect-split-om-post-eblock =
    rules( JavaPostEBlocks := [] )
    ; alltd(java-lift-post-eblock)
    ; !(<id>,<JavaPostEBlocks>)

  java-lift-post-eblock :
    PostEBlock(e, bstm*) -> e
    with rules( JavaPostEBlocks := <conc>(bstm*, <JavaPostEBlocks>) )

/*
  collect-split-om-pre-eblock =
    rules( JavaPreEBlocks := [] )
    ; alltd(lift-pre-eblock)
    ; !(<id>,<JavaPreEBlocks>)

  lift-pre-eblock :
    PreEBlock(bstm*, e) -> e
    with rules( JavaPreEBlocks := <conc>(bstm*, <JavaPreEBlocks>) )

  collect-split-om-post-eblock =
    rules( JavaPostEBlocks := [] )
    ; alltd(java-lift-post-eblock)
    ; !(<id>,<JavaPostEBlocks>)

  lift-post-eblock :
    PostEBlock(e, bstm*) -> e
    with rules( JavaPostEBlocks := <conc>(bstm*, <JavaPostEBlocks>) )
*/

/*

  collect-split-om-pre-eblock =
    !(<alltd(?PreEBlock(_, <id>))>,<collect-om(?PreEBlock(<id>, _), conc); concat>)

  collect-split-om-post-eblock =
    !(<alltd(?PostEBlock(<id>, _))>, <collect-om(?PostEBlock(_, <id>), conc); concat>)
*/

/*

  flatten-inner-block = 
    \ [ InnerBlock(ys) | xs ] -> <conc>(<flatten-inner-block>ys, <flatten-inner-block>xs) \; say(!"InnerBlock")
      <+
    \ [ x | xs ] -> [ x | <flatten-inner-block>xs ] \
      <+
    \ [ InnerBlock(ys) | [] ] -> <flatten-inner-block> ys \; say(!"InnerBlock")
      <+
    \ [ x | [] ] -> [ x ] \
      <+
    ?[]
*/
