/**
 * Parses a Java source file to an abstract syntax tree.
 *
 * @author Martin Bravenboer
 */
module parse-java
imports
  libstratego-lib
  libjava-front
  libstratego-sglr
  libstratego-tool-doc

strategies

  main-parse-java =
    io-stream-wrap(
      parse-java-options
    , parse-java-usage
    , parse-java-about
    , parse-java
    )

strategies

  parse-java =
    ?(<id>, fout)
    ; parse-java-stream-pt(|<get-start-symbol>, <get-input-path>)
    ; if must-preserve-comments then
        asfix-anno-comments(|["Comment"])
      end
    ; if must-preserve-positions then
        asfix-anno-position-info(|"")
      end
    ; implode-asfix
    ; if <get-config> "-b" then
        <write-in-baf-to-stream> (fout, <id>)
      else 
        <write-in-text-to-stream> (fout, <id>)
        ; <fputc> ('\n', fout)
      end

  get-input-path =
    <get-config> "-i" <+ !"stdin"

/**
 * Options
 */
strategies

  parse-java-options =
    release-option(|"Parse source")
    + symbol-option
    + preserve-comments-option
    + preserve-positions-option

/**
 * Options: Start symbol
 */
strategies

  symbol-option =
    ArgOption("-s" + "--start-symbol"
    , set-start-symbol
    , !HelpString("-s|--start-symbol s", "Start parsing with symbol s [CompilationUnit]")
    )

  set-start-symbol =
    <set-config> ("start-symbol", <id>)

  get-start-symbol = 
    <get-config> "start-symbol" <+ !"CompilationUnit"

/**
 * Options: Comment preservation
 */
strategies

  preserve-comments-option =
    Option("--preserve-comments"
    , <set-preserve-comments> "yes"
    , !HelpString("--preserve-comments", "Preserve source code
            comments as annotations of the abstract syntax tree. [off]")
    )

  set-preserve-comments =
    <set-config> ("preserve-comments", <id>)

  must-preserve-comments =
    <get-config> "preserve-comments" => "yes"

/**
 * Options: Position preservation
 */
strategies

  preserve-positions-option =
    Option("--preserve-positions"
    , <set-preserve-positions> "yes"
    , !HelpString("--preserve-positions", "Preserve source code positions in the
                   input file as annotations of the abstract syntax tree. [off]")
    )

  set-preserve-positions =
    <set-config> ("preserve-positions", <id>)

  must-preserve-positions =
    <get-config> "preserve-positions" => "yes"


/**
 * Options: Java release
 */
strategies

  /**
   * Release option, just checked and ignored for now.
   */
  release-option(|msg) =
      ArgOption("--release"
      , set-release-option
      , !HelpString("--release r", <conc-strings> (msg, " for release r [1.5]"))
      )
    + Option("-1.5"
      , <set-release-option> "1.5"
      , !HelpString("-1.5", <conc-strings> (msg, " as Java 2 version 1.5"))
      )

  set-release-option = 
    ?"1.5"
    ; <fprint> (<stderr-stream>, ["parse-java: parsing for release ", <id>, " is not supported.\n"])


/**
 * Documentation
 */
strategies

  parse-java-usage =
    <tool-doc>
      [ Usage("parse-java [OPTIONS]")
      , Summary(
         "Parses a Java source file to an abstract syntax 
          tree in the ATerm format.")
      , OptionUsage()
      , AutoReportBugs()
      ]

  parse-java-about =
    <tool-doc>
      [ AutoProgram()
      , Author(Person("Martin Bravenboer", "martin.bravenboer@gmail.com"))
      , GNU_LGPL("2002-2007", "Martin Bravenboer <martin.bravenboer@gmail.com>")
      , Config([
          DefaultXTCRepository()
        , CurrentXTCRepository()
        ])
      ]

