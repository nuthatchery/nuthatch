module core-lift-eblocks
imports
  libstratego-lib 
  libjava-front

strategies
  
  main-core-lift-eblocks =
    io-wrap(core-lift-eblocks)

  core-lift-eblocks =
    bottomup(try( desugar-prepostblock <+ lift-to-block-level ))

  desugar-prepostblock :
    PrePostEBlock(pre, expr, post) -> PreEBlock(pre, PostEBlock(expr, post) )

  lift-to-block-level = 
        lift-from-blocks 
    <+  lift-from-constructor-blocks
    <+  lift-from-switchgroup-blocks
  
  lift-from-blocks = 
      ?Block(<id>)
    ; map(lift-eblocks)
    ; concat
    ; flatten-inner-block
    ; !Block(<id>)

  lift-from-constructor-blocks = 
      ?ConstrBody(x, <id>)
    ; map(lift-eblocks)
    ; concat
    ; flatten-inner-block
    ; !ConstrBody(x, <id>)

  lift-from-switchgroup-blocks =
      ?SwitchGroup(x, <id>)
    ; map(lift-eblocks)
    ; concat
    ; flatten-inner-block
    ; !SwitchGroup(x, <id>)
      
  /**
   * @todo  Nested EBlocks?
   * @todo  Nested Blocks?
   * @todo  Is Block the only block level element?
   * @todo  Anonymous inner classes?
   * @todo  Is flatten-list required?
   */
  lift-eblocks =
      collect-split-om-pre-eblock
    ; ?(<id>, pre-stms)
    ; collect-split-om-post-eblock
    ; ?(t, post-stms)
    ; ( !post-stms => []; !pre-stms => []
      < ![t]
      + <concat> [<map(lift-eblocks); concat> pre-stms, <lift-eblocks> t, <map(lift-eblocks); concat> post-stms]
      )

  collect-split-om-pre-eblock =
    !(<alltd(?PreEBlock(_, <id>))>,<collect-om(?PreEBlock(<id>, _), conc); concat>)

  collect-split-om-post-eblock =
    !(<alltd(?PostEBlock(<id>, _))>, <collect-om(?PostEBlock(_, <id>), conc); concat>)

  flatten-inner-block = 
    ?[ InnerBlock(ys) | xs ];<conc>(<flatten-inner-block>ys, <flatten-inner-block>xs)
      <+
    ?[ x | xs ];![ x | <flatten-inner-block>xs ]
      <+
    ?[ InnerBlock(ys) | [] ] ; <flatten-inner-block> ys
      <+
    ?[ x | [] ];![ x ]
