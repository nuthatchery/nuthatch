TestSuite(
  Name("Expressions")
, Sort("Expr")
, Tests(
  [ Test(Descr("null literal")
    , String("null"), Lit(Null())
    )
  , Test(Descr("simple int literal")
    , String("5"), Lit(Deci("5"))
    )
  , Test(Descr("simple addition")
    , String("2 + 3"), Plus(Lit(Deci("2")), Lit(Deci("3")))
    )
  , Test(Descr("always take longest match for --")
    , String("1--2"), Failure()
    )
  , Test(Descr("simple pre increment")
    , String("++2"), PreIncr(Lit(Deci("2")))
    )
  , Test(Descr("simple post increment")
    , String("2++"), PostIncr(Lit(Deci("2")))
    )
  , Test(Descr("simple pre decrement")
    , String("--2"), PreDecr(Lit(Deci("2")))
    )
  , Test(Descr("simple post decrement")
    , String("2--"), PostDecr(Lit(Deci("2")))
    )
  , Test(Descr("addition is left associative")
    , String("1 + 2 + 3"), Plus(Plus(Lit(Deci("1")), Lit(Deci("2"))), Lit(Deci("3")))
    )
  , Test(Descr("multiplication has higher priority than addition")
    , String("1 + 2 * 3"), Plus(Lit(Deci("1")), Mul(Lit(Deci("2")), Lit(Deci("3"))))
    )
  , Test(Descr("simple array creation expression")
    , String("new int[3]"), NewArray(Int,[Dim(Lit(Deci("3")))],[])
    )
  , Test(Descr("2 dimensional array creation expression")
    , String("new int[3][4]"), Success()
    )
  , Test(Descr("array creation with initializer")
    , String("new int[]{1,2,3,4}"), Success()
    )
  , Test(Descr("array initializer with stupid comma")
    , String("new int[]{1,2,3,4,}"), Success()
    )
  , Test(Descr("two dimensional array initializer")
    , String("new int[][]{{1,2},{3,4}}"), Success()
    )
  , Test(Descr("two dimensional array initializer with null")
    , String("new int[][]{{1,2},{3,4}, null}"), Success()
    )
  , Test(Descr("illegal array access")
    , String("new int[3][4][][2]"), Failure()
    )
  , Test(Descr("relational operators have higher priority than equational ones")
    , String("1 < 2 == 3 < 4"), Eq(Lt(Lit(Deci("1")), Lit(Deci("2"))), Lt(Lit(Deci("3")), Lit(Deci("4"))))
    )
  , Test(Descr("simple name")
    , String("x") , Name(ExprName(Id("x")))
    )
  , Test(Descr("post increment has higher priority than pre increment")
    , String("++ 1 ++") , PreIncr(PostIncr(Lit(Deci("1"))))
    )
  , Test(Descr("simple assignment")
    , String("x = 1"), Assign(ExprName(Id("x")), Lit(Deci("1")))
    )
  , Test(Descr("Field access on expression")
    , String("blaat().field"), Field(Invoke(Method(MethodName(Id("blaat"))), []), Id("field"))
    )
  , Test(Descr("Method invocation has higher priority than assignment")
    , String("x = var.method()"),
      Assign(ExprName(Id("x")), Invoke(Method(MethodName(AmbName(Name([Id("var")])), Id("method"))), []))
    )
  , Test(Descr("Simple literal")
    , String("\"Literal\""), Lit(String("\"Literal\""))
    )
  , Test(Descr("Method invocation has higher priority than assignment")
    , String("country = _loader.getname(countryID)"),
      Assign(ExprName(Id("country")), Invoke(Method(MethodName(AmbName(Name([Id("_loader")])), Id("getname"))), 
        [Name(ExprName(Id("countryID")))]))
    )
  , Test(Descr("Method invocation has higher priority than addition")
    , String("\"Literal\" + \" Literal \".trim()"),
      Plus(Lit(String("\"Literal\"")), Invoke(Method(Lit(String("\" Literal \"")), Id("trim")), []))
    )
  , Test(Descr("Prefer a methodname over an expression")
    , String("blaat.trim()"), Invoke(Method(MethodName(AmbName(Name([Id("blaat")])), Id("trim"))), [])
    )
  , Test(Descr("field access has higher priority than addition")
    , String("\"Literal\" + \" Literal \".notreallyafield"),
      Plus(Lit(String("\"Literal\"")), Field(Lit(String("\" Literal \"")), Id("notreallyafield")))
    )
  , Test(Descr("method invocations")
    , String("x.blaat1().blaat2().blaat3()"),
      Invoke(
        Method(
          Invoke(
            Method(
              Invoke(
                Method(MethodName(AmbName(Name([Id("x")])), Id("blaat1"))), [])
            , Id("blaat2")), []), Id("blaat3")), [])
    )
  , Test(Descr("Mod"), String("i % radix"), Success())
  , Test(Descr("Minus"), String("-(i % radix)"), Success())
  , Test(Descr("Array subscript 0"), String("buf[x]"), ArrayAccess(Name(ExprName(Id("buf"))), Name(ExprName(Id("x")))))
  , Test(Descr("Array subscript 1"), String("buf[charPos--]"), Success())
  , Test(Descr("Array subscript 2"), String("digits[-(i % radix)]"), Success())
  ])
)