module Generic-Java
imports Java Java-StaticImport

exports
  sorts ClassDec MethodHead AMethodHead 
  context-free syntax

    %% declarations

    ClassMod*     "class"     Id TypeParams? Super? Interfaces? ClassBody -> ClassDec {cons("ClassDec"), prefer}
    InterfaceMod* "interface" Id TypeParams? ExtendsInterfaces? InterfaceBody -> InterfaceDec {cons("InterfaceDec"), prefer}

    MethodMod*  TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? -> MethodHead  {cons("Head"), prefer}
    AMethodMod* TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? -> AMethodHead {cons("Head"), prefer}

    %% expressions 

             "new" ClassOrInterfaceType TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("NewInstance"), prefer}
    Expr "." "new" Id                   TypeArgs? "(" {Expr ","}* ")" ClassBody? -> Expr {cons("QNewInstance"), prefer}

    %% types

    TypeName -> ClassType {avoid}
    TypeName -> InterfaceType {avoid}

    { ClassTypePart "."}+     -> ClassType {cons("GClassType")}
    { InterfaceTypePart "."}+ -> InterfaceType {cons("GInterfaceType")}

    Id          -> ClassTypePart
    Id TypeArgs -> ClassTypePart {cons("ParamClass")}

    Id          -> InterfaceTypePart
    Id TypeArgs -> InterfaceTypePart {cons("ParamInterface")}

    %% misc

    "<" {TypeParam ","}+ ">" -> TypeParams {cons("TypeParams")}

    %% this should in fact by RefType, but I hate all these non terminals for types.
    "<" {Type   ","}+ ">"    -> TypeArgs   {cons("TypeArgs")}
    
    TypeVar Bound? -> TypeParam {cons("TypeParam")}

    "extends" ClassOrInterfaceType IBound? -> Bound {cons("Bound")}
    "&" {InterfaceType "&"}+ -> IBound {cons("InterfacesBound")}

    Id -> TypeVar {cons("TypeVar")}

    %% TODO: constructors can be parameterized too, although the specification doesn't mention this
