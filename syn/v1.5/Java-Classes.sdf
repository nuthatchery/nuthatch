module Java-Classes
imports
  Java-Names
  Java-Modifiers
  Java-MethodDecs
  Java-Statements
  Java-Types

exports
  context-free start-symbols
    ClassDec

  sorts
    ClassDec
    ClassBodyDec
    Super
    Interfaces
    ClassBody
    ClassMemberDec
    FieldDec
    StaticInit
    InstanceInit
    ConstructorDec
    ConstructorBody
    CInvoke

  context-free syntax
    EnumDec -> ClassDec
    ClassDecHead "{" ClassBodyDec* "}" -> ClassDec {cons("ClassDec")}

    ClassMod* "class" Id  Super? Interfaces? -> ClassDecHead {cons("ClassDecHead")}
    "extends" ClassType                      -> Super        {cons("Extends")}
    "implements" {InterfaceType ","}+        -> Interfaces   {cons("Implements")}

    StaticInit     -> ClassBodyDec
    InstanceInit   -> ClassBodyDec
    ClassMemberDec -> ClassBodyDec
    ConstructorDec -> ClassBodyDec

    FieldDec     -> ClassMemberDec
    MethodDec    -> ClassMemberDec
    ClassDec     -> ClassMemberDec
    InterfaceDec -> ClassMemberDec
    ";"          -> ClassMemberDec {cons("Semicolon")}

    FieldMod* Type { VarDec ","}+ ";" -> FieldDec {cons("FieldDec")}

    "static" Block -> StaticInit   {cons("StaticInit")}
             Block -> InstanceInit {cons("InstanceInit")}

    ConstructorMod* SimpleTypeName "(" {FormalParam ","}* ")" Throws? ConstructorBody
          ->  ConstructorDec {cons("ConstructorDec")}

    "{" CInvoke? BlockStm* "}" -> ConstructorBody {cons("ConstructorBody")}

              "this" "(" {Expr ","}* ")" ";" -> CInvoke {cons("CInvoke")}
             "super" "(" {Expr ","}* ")" ";" -> CInvoke {cons("SuperCInvoke")}
    Expr "." "super" "(" {Expr ","}* ")" ";" -> CInvoke {cons("QSuperCInvoke")}

