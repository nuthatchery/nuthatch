%%%
 %% Section 3.10: Literals
 %%
 %% @author Martin Bravenboer <martin@cs.uu.nl>
 %%%
module languages/java-15/lexical/Literals
exports
  sorts
    IntLiteral
    DeciLiteral
    HexaLiteral
    OctaLiteral
    DeciNumeral
    HexaNumeral
    OctaNumeral

  context-free syntax
    DeciLiteral -> IntLiteral {cons("Deci")}
    HexaLiteral -> IntLiteral {cons("Hexa")}
    OctaLiteral -> IntLiteral {cons("Octa")}

  lexical syntax
    DeciNumeral [lL]? -> DeciLiteral
    HexaNumeral [lL]? -> HexaLiteral
    OctaNumeral [lL]? -> OctaLiteral

    "0" -> DeciNumeral
    [1-9][0-9]*  -> DeciNumeral
    [0][xX] [0-9a-fA-F]+ -> HexaNumeral
    [0]     [0-9a-fA-F]+ -> OctaNumeral

  sorts
    Float
    FloatLiteral
    FloatDigits
    ExponentPart

  context-free syntax
    Float -> FloatLiteral {cons("Float")}

  lexical syntax
    FloatDigits ExponentPart?  [fFdD]? -> Float
    [0-9]+ -> Float {reject}

    [0-9]* "." [0-9]* -> FloatDigits
           "."        -> FloatDigits {reject}
    [0-9]+            -> FloatDigits

    [eE] [\-\+] [0-9]+ -> ExponentPart

  sorts
    Bool
    BoolLiteral

  context-free syntax
    Bool -> BoolLiteral {cons("Bool")}
    "true"  -> Bool {cons("True")}
    "false" -> Bool {cons("False")}

  sorts
    StringLiteral
    CharLiteral
    StringPart
    CharContent
    SingleChar
    EscapeSeq
    UnicodeEscape
    NamedEscape
    OctaEscape
    LastOcta
    StringChars
    FooStringChars

  syntax
    StringLiteral -> <StringLiteral-CF>
    CharLiteral   -> <CharLiteral-CF>

    "\"" StringPart* "\"" -> StringLiteral {cons("String")}
    StringChars    -> StringPart {cons("Chars")}
    UnicodeEscape  -> StringPart
    EscapeSeq      -> StringPart

    "'" CharContent "'" -> CharLiteral {cons("Char")}
    SingleChar    -> CharContent {cons("Single")}
    UnicodeEscape -> CharContent
    EscapeSeq     -> CharContent

    ~[\12\13\'\\] -> SingleChar

    OctaEscape  -> EscapeSeq
    NamedEscape -> EscapeSeq

    "\\" [btnfr\"\'\\]     -> NamedEscape {cons("NamedEscape")}
    "\\" LastOcta          -> OctaEscape  {cons("OctaEscape1")}
    "\\" [0-7] LastOcta    -> OctaEscape  {cons("OctaEscape2")}
    "\\" [0-3] [0-7] [0-7] -> OctaEscape  {cons("OctaEscape3")}

    [0-7]          -> LastOcta
    <FooStringChars-LEX> -> StringChars

    ~[\"\\\n\13]+  -> <FooStringChars-LEX>

  restrictions
    StringChars -/- ~[\"\\\n\13]
    LastOcta    -/- [0-7]

  sorts NullLiteral
  context-free syntax
    "null"  -> NullLiteral {cons("Null")}
