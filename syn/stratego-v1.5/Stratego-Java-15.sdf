module Stratego-Java-15
imports Java-15-Prefixed StrategoRenamed

exports
  context-free start-symbols StrategoModule


exports
  variables
    [ij]   [0-9]*     -> JavaDeciLiteral {prefer}
    [xyz]  [0-9]*     -> JavaID          {prefer}


%%%
 %% Expressions
 %%%
exports

  %%%
   %% Variables for Expressions
   %%%
  variables
    "e"    [0-9]*     -> JavaExpr {prefer}
    "e"    [0-9]* "*" -> {JavaVarInit ","}* {prefer}
    "e"    [0-9]* "*" -> {JavaExpr ","}*    {prefer}

%%%
 %% Statements
 %%%
exports

  %%%
   %% Variables for Statements
   %%%
  variables
    "stm"  [0-9]*     -> JavaStm         {prefer}
    "bstm" [0-9]*     -> JavaBlockStm    {prefer}
    "bstm" [0-9]* "*" -> JavaBlockStm*   {prefer}

  %%%
   %% Quotations for Statements
   %%%
  context-free syntax
    "java:bstm"  "|[" JavaBlockStm "]|" -> StrategoTerm {cons("ToTerm")}
         "bstm"  "|[" JavaBlockStm "]|" -> StrategoTerm {cons("ToTerm")}
    "java"       "|[" JavaBlockStm "]|" -> StrategoTerm {cons("ToTerm")}
                 "|[" JavaBlockStm "]|" -> StrategoTerm {cons("ToTerm")}

    "java:bstm*" "|[" JavaBlockStm* "]|" -> StrategoTerm {cons("ToTerm")}
         "bstm*" "|[" JavaBlockStm* "]|" -> StrategoTerm {cons("ToTerm")}

    "java:block-stm"  "|[" JavaBlockStm "]|" -> StrategoTerm {cons("ToTerm")}
         "block-stm"  "|[" JavaBlockStm "]|" -> StrategoTerm {cons("ToTerm")}
    "java"            "|[" JavaBlockStm "]|" -> StrategoTerm {cons("ToTerm")}
                      "|[" JavaBlockStm "]|" -> StrategoTerm {cons("ToTerm")}

    "java:block-stm*" "|[" JavaBlockStm* "]|" -> StrategoTerm {cons("ToTerm")}
         "block-stm*" "|[" JavaBlockStm* "]|" -> StrategoTerm {cons("ToTerm")}

  %%%
   %% Anti Quotations for Statements
   %%%
  context-free syntax
    "~"       StrategoTerm  -> JavaBlockStm  {cons("FromTerm")}
    "~bstm:"  StrategoTerm  -> JavaBlockStm  {cons("FromTerm")}
    "~*"      StrategoTerm  -> JavaBlockStm* {cons("FromTerm")}
    "~bstm*:" StrategoTerm  -> JavaBlockStm* {cons("FromTerm")}

    "~stm:"   StrategoTerm  -> JavaStm {cons("FromTerm"), prefer}
    "~"       StrategoTerm  -> JavaStm {cons("FromTerm")}


%%%
 %% Types
 %%%
exports

  %%%
   %% Variables for Types
   %%%
  variables
    TypeVar -> JavaType 

  lexical syntax
    "t"  [0-9]* -> TypeVar
    "ty" [0-9]* -> TypeVar

  lexical restrictions
    TypeVar -/- [a-zA-Z0-9\_\$]

  %%%
   %% Quotation for Types
   %%%
  context-free syntax
            "t" "|[" JavaType "]|"   -> StrategoTerm {cons("ToTerm")}
           "ty" "|[" JavaType "]|"   -> StrategoTerm {cons("ToTerm")}

    "java:type" "|[" JavaType "]|"   -> StrategoTerm {cons("ToTerm")}
         "type" "|[" JavaType "]|"   -> StrategoTerm {cons("ToTerm")}
    "java"      "|[" JavaType "]|"   -> StrategoTerm {cons("ToTerm")}
                "|[" JavaType "]|"   -> StrategoTerm {cons("ToTerm")}

  %%%
   %% Anti-Quotation for Types
   %%%
  context-free syntax
    "~"       StrategoTerm -> JavaType {cons("FromTerm")}
    "~type:"  StrategoTerm -> JavaType {cons("FromTerm")}

%%%
 %% Names
 %%%
exports

  %%%
   %% Variables for Names
   %%%
  variables
    "ambname"  [0-9]* -> JavaAmbName    {prefer}
    "ename"    [0-9]* -> JavaExprName   {prefer}
    "fname"    [0-9]* -> JavaMethodName {prefer}
    "tname"    [0-9]* -> JavaTypeName   {prefer}
    "cname"    [0-9]* -> JavaClassName  {prefer}
    "pkgtname" [0-9]* -> JavaPackageOrTypeName  {prefer}

  %%%
   %% Quotations for Names
   %%%
  context-free syntax
    "ambname"  "|[" JavaAmbName    "]|" -> StrategoTerm {cons("ToTerm")}
    "ename"    "|[" JavaExprName   "]|" -> StrategoTerm {cons("ToTerm")}
    "fname"    "|[" JavaMethodName "]|" -> StrategoTerm {cons("ToTerm")}
    "tname"    "|[" JavaTypeName   "]|" -> StrategoTerm {cons("ToTerm")}
    "cname"    "|[" JavaClassName  "]|" -> StrategoTerm {cons("ToTerm")}
    "pkgtname" "|[" JavaPackageOrTypeName "]|" -> StrategoTerm {cons("ToTerm")}

%%%
 %% Modifiers
 %%%
exports

  %%%
   %% Variables for Modifiers
   %%%
  variables
    "mmod" [0-9]*     -> JavaMethodMod  {prefer}
    "mmod" [0-9]* "*" -> JavaMethodMod* {prefer}

  %%%
   %% Quotations for Modifiers
   %%%
  context-free syntax
           "|[" JavaModifier "]|" -> StrategoTerm {cons("ToTerm")}
    "mod"  "|[" JavaModifier "]|" -> StrategoTerm {cons("ToTerm")}


%%%
 %% Must be cleaned up
 %%%
exports
  context-free syntax
            "e" "|[" JavaExpr "]|"   -> StrategoTerm {cons("ToTerm")}
    "java:expr" "|[" JavaExpr "]|"   -> StrategoTerm {cons("ToTerm")}
         "expr" "|[" JavaExpr "]|"   -> StrategoTerm {cons("ToTerm")}
    "java"      "|[" JavaExpr "]|"   -> StrategoTerm {cons("ToTerm")}
                "|[" JavaExpr "]|"   -> StrategoTerm {cons("ToTerm")}

    "java:compilation-unit" "|[" JavaCompilationUnit "]|"  -> StrategoTerm {cons("ToTerm")}
         "compilation-unit" "|[" JavaCompilationUnit "]|"  -> StrategoTerm {cons("ToTerm")}
    "java"                  "|[" JavaCompilationUnit "]|"  -> StrategoTerm {cons("ToTerm")}
                            "|[" JavaCompilationUnit "]|"  -> StrategoTerm {cons("ToTerm")}

    "java:type-dec" "|[" JavaTypeDec "]|" -> StrategoTerm {cons("ToTerm")}
         "type-dec" "|[" JavaTypeDec "]|" -> StrategoTerm {cons("ToTerm")}
    "java"          "|[" JavaTypeDec "]|" -> StrategoTerm {cons("ToTerm")}
                    "|[" JavaTypeDec "]|" -> StrategoTerm {cons("ToTerm")}

    "java:class-body-dec" "|["  JavaClassBodyDec  "]|" -> StrategoTerm {cons("ToTerm")}
         "class-body-dec" "|["  JavaClassBodyDec  "]|" -> StrategoTerm {cons("ToTerm")}
    "java"                "|["  JavaClassBodyDec  "]|" -> StrategoTerm {cons("ToTerm")}
                          "|["  JavaClassBodyDec  "]|" -> StrategoTerm {cons("ToTerm")}

    "java:class-body-dec*" "|[" JavaClassBodyDec* "]|" -> StrategoTerm {cons("ToTerm")}
         "class-body-dec*" "|[" JavaClassBodyDec* "]|" -> StrategoTerm {cons("ToTerm")}
    "java"                 "|[" JavaClassBodyDec* "]|" -> StrategoTerm {cons("ToTerm")}
                           "|[" JavaClassBodyDec* "]|" -> StrategoTerm {cons("ToTerm")}

    "java:stm" "|["  JavaStm "]|" -> StrategoTerm {cons("ToTerm")}
         "stm" "|["  JavaStm "]|" -> StrategoTerm {cons("ToTerm")}

    "java:formal-param" "|[" JavaFormalParam "]|" -> StrategoTerm {cons("ToTerm")}
         "formal-param" "|[" JavaFormalParam "]|" -> StrategoTerm {cons("ToTerm")}
    "java"              "|[" JavaFormalParam "]|" -> StrategoTerm {cons("ToTerm")}
                        "|[" JavaFormalParam "]|" -> StrategoTerm {cons("ToTerm")}

    "java:formal-param*" "|[" {JavaFormalParam ","}* "]|" -> StrategoTerm {cons("ToTerm")}
         "formal-param*" "|[" {JavaFormalParam ","}* "]|" -> StrategoTerm {cons("ToTerm")}
    "java"               "|[" {JavaFormalParam ","}* "]|" -> StrategoTerm {cons("ToTerm")}
                         "|[" {JavaFormalParam ","}* "]|" -> StrategoTerm {cons("ToTerm")}

    "java:imember-dec" "|["  JavaAbstractMethodDec  "]|" -> StrategoTerm {cons("ToTerm")}
         "imember-dec" "|["  JavaAbstractMethodDec  "]|" -> StrategoTerm {cons("ToTerm")}
    "java"             "|["  JavaAbstractMethodDec  "]|" -> StrategoTerm {cons("ToTerm")}
                       "|["  JavaAbstractMethodDec  "]|" -> StrategoTerm {cons("ToTerm")}

    "java:imember-dec*" "|["  JavaAbstractMethodDec*  "]|" -> StrategoTerm {cons("ToTerm")}
         "imember-dec*" "|["  JavaAbstractMethodDec*  "]|" -> StrategoTerm {cons("ToTerm")}
    "java"              "|["  JavaAbstractMethodDec*  "]|" -> StrategoTerm {cons("ToTerm")}
                        "|["  JavaAbstractMethodDec*  "]|" -> StrategoTerm {cons("ToTerm")}

  %% Anti-quotation
  context-free syntax

    "~"      StrategoTerm -> JavaName {cons("FromTerm")}
    "~name:" StrategoTerm -> JavaName {cons("FromTerm")}
    "~*:"    StrategoTerm -> JavaName {cons("FromTerm")}

    "~"     StrategoTerm     -> JavaId   {cons("FromTerm")}
    "~id:"  StrategoTerm     -> JavaId   {cons("FromTerm")}
    "~idd:" StrategoTerm ":" -> JavaId   {cons("FromTerm")}

    "~x:" StrategoTerm -> JavaID {cons("FromTerm")}

    "~"  StrategoTerm -> JavaTypeParam        {cons("FromTerm")}
    "~*" StrategoTerm -> {JavaTypeParam ","}+ {cons("FromTerm")}


    "~"  StrategoTerm  ->  JavaFormalParam       {cons("FromTerm")}
    "~*" StrategoTerm  -> {JavaFormalParam ","}* {cons("FromTerm")}

    "~"      StrategoTerm  ->  JavaExpr {cons("FromTerm")}
    "~e:"    StrategoTerm  ->  JavaExpr {prefer, cons("FromTerm")}
    "~expr:" StrategoTerm  ->  JavaExpr {prefer, cons("FromTerm")}

    "~*" StrategoTerm      -> {JavaExpr ","}*    {cons("FromTerm")}
    "~*" StrategoTerm      -> {JavaVarInit ","}* {cons("FromTerm")}

    "~"  StrategoTerm  -> JavaTypeDec  {cons("FromTerm")}
    "~*" StrategoTerm  -> JavaTypeDec* {cons("FromTerm")}

    "~"  StrategoTerm  -> JavaClassBodyDec  {cons("FromTerm")}
    "~*" StrategoTerm  -> JavaClassBodyDec* {cons("FromTerm")}

    "~"  StrategoTerm  -> JavaInterfaceMemberDec  {cons("FromTerm")}
    "~*" StrategoTerm  -> JavaInterfaceMemberDec* {cons("FromTerm")}

    "~i:"      StrategoTerm -> JavaDeciLiteral   {cons("FromTerm")}
    "~deci:"   StrategoTerm -> JavaDeciLiteral   {cons("FromTerm")}
    "~hexa:"   StrategoTerm -> JavaHexaLiteral   {cons("FromTerm")}
    "~octa:"   StrategoTerm -> JavaOctaLiteral   {cons("FromTerm")}
    "~float:"  StrategoTerm -> JavaFloatLiteral  {cons("FromTerm")}
    "~string:" StrategoTerm -> JavaStringLiteral {cons("FromTerm")}
    "~char:"   StrategoTerm -> JavaCharLiteral   {cons("FromTerm")}

  syntax
    "~" <StrategoTerm-CF> -> JavaStringChars {cons("FromTerm"), prefer}
    "~" <StrategoTerm-CF> <LAYOUT?-CF> -> JavaSingleChar  {cons("FromTerm"), prefer}

